cmake_minimum_required (VERSION 3.7)

set(CMAKE_CXX_STANDARD 23)

option(AWL_JTHREAD_EXTRAS "Use home made implementation of std::jthread.")
option(AWL_BOOST_EXTRAS "Use boost::multiprecision.")
option(AWL_COMPILE_SOURCES "Compile AWL sources." ON)
option(AWL_COMPILE_TESTS "Compile AWL tests.")
option(AWL_COMPILE_EXPERIMENTAL "Compile experimental AWL code.")
option(AWL_COMPILE_MAIN "Compile and link AWL main() function.")
option(AWL_NO_DEPRECATED "Disable deprecated warnings in C++.")
option(AWL_STATIC_RUNTIME "Linking statically against libgcc and libstdc++.")
option(AWL_FIND_QT "Use QString if the project is built with QT." ON)
option(AWL_SANITIZE_THREAD "Use Thread Sanitizer.")
option(AWL_SANITIZE_UNDEFINED "Use Undefined Behavior Sanitizer.")
option(AWL_SANITIZE_ADDRESS "Use Address Sanitizer.")
option(AWL_ANSI_CMD_CHAR "Define CommandLineProvider with char, but not with awl::Char.")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    # Apple Clang does not have std::jthread.
    # set(AWL_JTHREAD_EXTRAS ON)
    add_definitions("-fexperimental-library")
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "20.0.0")
        set(AWL_JTHREAD_EXTRAS ON)
    else()
        # Android Clang has std::jthread since 20.0 as experimental.
        add_definitions("-fexperimental-library")
    endif()
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    add_definitions("-Wall -Wextra -pedantic")
    # Unused operators in local namespaces defined by AWL_MEMBERWISE_EQUATABLE
    add_definitions("-Wno-unused-function")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_definitions("-Wall -Wextra -pedantic")
    #add_definitions("-Wall -Wextra -pedantic -pthread")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    # using Intel C++
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(AWL_BOOST_EXTRAS ON)
    # using Visual Studio C++
    # add_compile_options("/std:c++latest")
    add_compile_options("/W4" "/Zc:__cplusplus")
    add_definitions(-MP -D_UNICODE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX)
    if (AWL_NO_DEPRECATED)
        add_definitions(-D_SILENCE_ALL_CXX23_DEPRECATION_WARNINGS)
    endif()
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (AWL_SANITIZE_THREAD)
        message("Using Thread Sanitizer.")
        add_definitions("-fsanitize=thread -fno-omit-frame-pointer")
        link_libraries("-fsanitize=thread")
    endif()
    if (AWL_SANITIZE_UNDEFINED)
        message("Using Undefined Behavior Sanitizer.")
        add_definitions("-fsanitize=undefined -fno-omit-frame-pointer")
        link_libraries("-fsanitize=undefined")
    endif()
    if (AWL_SANITIZE_ADDRESS)
        message("Using Address Sanitizer.")
        add_definitions("-fsanitize=address -fno-omit-frame-pointer")
        link_libraries("-fsanitize=address")
    endif()
    #set(CMAKE_EXE_LINKER_FLAGS "-fuse-ld=gold")
endif()

set(AWL_DIR ${AWL_ROOT_DIR}/Awl)
